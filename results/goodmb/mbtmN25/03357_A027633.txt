
orders_used: [16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20]
dasco's acc_1, acc_10: False, False is stored in is_reconst and is_check
n_input: 25
While total time consumed by now, scale:3358/10000, seq_id:A027633, order:20 took:
 27.3 seconds, i.e. 0.45 minutes or 0.008 hours.
CORELIST: False, METHOD: MB, SINDy: False (True also in case of MAVI), GROUND_TRUTH: False, SINDy_default: True, DEBUG: False, OEISformer: True
n_of_terms_ed: 200, N_OF_TERMS_ED: 200
Library: n, max_order 20, max_degree: 3, threshold: 0.1, 
n_more_terms: 10
Library: n, max_order 20, threshold: 0.1
  MB:  n_more_terms: 10 MAX_BITSIZE: 50

by degree: unknown_mb and order: 16.
eqs_explicit:
[]
non_linears:
['a(n-1) -10*a(n-9) -13*a(n-10) +6*a(n-11) +20*a(n-12) +8*a(n-13) -9*a(n-14) -4*a(n-15) +10*a(n-16) -20', 'a(n-10)*a(n-16) +(-61/2)*a(n-9) +63*a(n-10) +66*a(n-11) -24*a(n-12) -101*a(n-13) -100*a(n-14) +68*a(n-15) +(-111/2)*a(n-16) -51/2', 'a(n-14)*a(n-15) +(-19/8)*a(n-9) +(25/4)*a(n-10) +(101/4)*a(n-11) +19*a(n-12) -19*a(n-13) -57*a(n-14) +(-177/4)*a(n-15) +(-37/8)*a(n-16) -237/8', 'a(n-9)*a(n-10) +(-101/2)*a(n-9) +212*a(n-10) +306*a(n-11) +24*a(n-12) -411*a(n-13) -636*a(n-14) -252*a(n-15) +(-387/2)*a(n-16) -595/2', 'a(n-10)*a(n-14) +(-261/8)*a(n-9) +(323/4)*a(n-10) +(419/4)*a(n-11) -8*a(n-12) -147*a(n-13) -201*a(n-14) +(89/4)*a(n-15) +(-443/8)*a(n-16) -547/8', 'a(n-8) +(-8/17)*a(n-9) +(-42/17)*a(n-10) +(4/17)*a(n-11) +(56/17)*a(n-12) +(48/17)*a(n-13) +(-58/17)*a(n-14) +(-69/17)*a(n-15) +(10/17)*a(n-16) -31/17', 'a(n-7) +(-24/17)*a(n-9) +(-24/17)*a(n-10) +(12/17)*a(n-11) +(32/17)*a(n-12) +(-26/17)*a(n-13) +(-21/17)*a(n-14) +(14/17)*a(n-15) +(30/17)*a(n-16) -25/17', 'a(n-6) +(-65/68)*a(n-9) +(-109/34)*a(n-10) +(-5/34)*a(n-11) +(16/17)*a(n-12) +(55/17)*a(n-13) +(-2/17)*a(n-14) +(-71/34)*a(n-15) +(145/68)*a(n-16) -203/68', 'n +(-61/68)*a(n-9) +(-39/34)*a(n-10) +(45/34)*a(n-11) +(43/17)*a(n-12) +(15/17)*a(n-13) +(-33/17)*a(n-14) +(-41/34)*a(n-15) +(89/68)*a(n-16) -995/68', 'a(n-3) +(-195/34)*a(n-9) +(-106/17)*a(n-10) +(36/17)*a(n-11) +(147/17)*a(n-12) +(92/17)*a(n-13) +(-63/17)*a(n-14) +(-43/17)*a(n-15) +(197/34)*a(n-16) -303/34', 'a(n-11)*a(n-13) +121*a(n-11) +54*a(n-12) -139*a(n-13) -216*a(n-14) -117*a(n-15) +123*a(n-16) -54*a(n-17) -58', 'a(n-10) +(-14/37)*a(n-11) +(-78/37)*a(n-12) +(-72/37)*a(n-13) +(16/37)*a(n-14) +(128/37)*a(n-15) +(62/37)*a(n-16) +(43/37)*a(n-17) +35/37', 'n +(-55/37)*a(n-11) +(-21/37)*a(n-12) +(29/37)*a(n-13) +(47/37)*a(n-14) +(43/37)*a(n-15) +(11/37)*a(n-16) +(87/37)*a(n-17) -547/37', 'a(n-9) +(-98/37)*a(n-11) +(-28/37)*a(n-12) +(88/37)*a(n-13) +(112/37)*a(n-14) +(-66/37)*a(n-15) +(-121/37)*a(n-16) +(42/37)*a(n-17) -51/37', 'a(n-8) +(-72/37)*a(n-11) +(-84/37)*a(n-12) +(-32/37)*a(n-13) +(-34/37)*a(n-14) +(135/37)*a(n-15) +(118/37)*a(n-16) +(126/37)*a(n-17) -5/37', 'a(n-7) +(-132/37)*a(n-11) +(-80/37)*a(n-12) +(-34/37)*a(n-13) +(135/37)*a(n-14) +(118/37)*a(n-15) +(-18/37)*a(n-16) +(120/37)*a(n-17) -77/37', 'a(n-6) +(-144/37)*a(n-11) +(-242/37)*a(n-12) +(-27/37)*a(n-13) +(154/37)*a(n-14) +(270/37)*a(n-15) +(162/37)*a(n-16) +(178/37)*a(n-17) -47/37', 'a(n-16)*a(n-17) +(187/37)*a(n-11) +(212/37)*a(n-12) +(-69/37)*a(n-13) +(-404/37)*a(n-14) +(-457/37)*a(n-15) +(-141/37)*a(n-16) +(-96/37)*a(n-17) -264/37', 'a(n-5) +(-334/37)*a(n-11) +(-143/37)*a(n-12) +(127/37)*a(n-13) +(276/37)*a(n-14) +(210/37)*a(n-15) +(-59/37)*a(n-16) +(233/37)*a(n-17) -164/37', 'a(n-4) +(-311/37)*a(n-11) +(-369/37)*a(n-12) +(-93/37)*a(n-13) +(292/37)*a(n-14) +(597/37)*a(n-15) +(262/37)*a(n-16) +(461/37)*a(n-17) -129/37', 'a(n-11) -4*a(n-13) +(-9/2)*a(n-14) +a(n-15) +8*a(n-16) +(13/2)*a(n-17) +(1/2)*a(n-18) +7/2', 'a(n-8) -20*a(n-13) -25*a(n-14) +9*a(n-15) +46*a(n-16) +45*a(n-17) -3*a(n-18) +22', 'a(n-7) -26*a(n-13) -27*a(n-14) +10*a(n-15) +54*a(n-16) +54*a(n-17) -2*a(n-18) +25', 'a(n-12) -5*a(n-13) +(-27/4)*a(n-14) +(3/2)*a(n-15) +12*a(n-16) +(51/4)*a(n-17) +(-7/4)*a(n-18) +27/4', 'a(n-10) -14*a(n-13) +(-31/2)*a(n-14) +7*a(n-15) +30*a(n-16) +(61/2)*a(n-17) +(-7/2)*a(n-18) +33/2', 'n -8*a(n-13) +(-37/4)*a(n-14) +(7/2)*a(n-15) +19*a(n-16) +(77/4)*a(n-17) +(-1/4)*a(n-18) -23/4', 'a(n-18)^2 +50*a(n-13) +51*a(n-14) -32*a(n-15) -118*a(n-16) -103*a(n-17) +14*a(n-18) -67', 'a(n-17)^2 +16*a(n-13) +(41/2)*a(n-14) -3*a(n-15) -38*a(n-16) +(-107/2)*a(n-17) +(-15/2)*a(n-18) -49/2', 'a(n-2) -142*a(n-13) -165*a(n-14) +65*a(n-15) +328*a(n-16) +323*a(n-17) -18*a(n-18) +150', 'a(n-16)^2 +(19/2)*a(n-15) +10*a(n-16) +(-83/2)*a(n-18) +(-57/2)*a(n-19) -3/2', 'a(n-10) -2*a(n-15) -6*a(n-16) -a(n-17) +4*a(n-18) +4*a(n-19) -3', 'a(n-14) +a(n-15) +(-2/3)*a(n-16) +(-7/3)*a(n-17) -2*a(n-18) +(1/3)*a(n-19) -4/3', 'a(n-19)^2 +a(n-15) +(4/3)*a(n-16) +(-4/3)*a(n-17) -3*a(n-18) +(-8/3)*a(n-19) -1/3', 'a(n-11) +(-3/2)*a(n-15) +(-7/3)*a(n-16) +(-8/3)*a(n-17) +(5/2)*a(n-18) +(7/6)*a(n-19) -13/6', 'a(n-9) -5*a(n-15) +(-13/3)*a(n-16) +(-2/3)*a(n-17) +5*a(n-18) +(11/3)*a(n-19) -14/3', 'a(n-17)^2 +(9/2)*a(n-15) +5*a(n-16) -11*a(n-17) +(-21/2)*a(n-18) +(-11/2)*a(n-19) +3/2', 'a(n-12) +(-1/2)*a(n-15) +(-5/3)*a(n-16) +(-4/3)*a(n-17) +(-3/2)*a(n-18) +(11/6)*a(n-19) -11/6', 'a(n-8) -a(n-15) +(-22/3)*a(n-16) +(-20/3)*a(n-17) +2*a(n-18) +(20/3)*a(n-19) -29/3', 'a(n-13) +(-7/4)*a(n-15) +(-11/6)*a(n-16) +(1/3)*a(n-17) +(11/4)*a(n-18) +(-1/12)*a(n-19) +1/12', 'a(n-16) +2*a(n-17) -5*a(n-19) -3*a(n-20) -1', 'a(n-19)*a(n-20) +(-1/3)*a(n-17) +(-2/3)*a(n-18) +(-1/3)*a(n-20) +4/3', 'a(n-11) -2*a(n-17) -a(n-18) -6*a(n-19) -2*a(n-20) -5', 'a(n-18)^2 -4*a(n-17) -11*a(n-18) +12*a(n-19) +8*a(n-20) +6', 'a(n-5) -a(n-17) -4*a(n-18) -40*a(n-19) -16*a(n-20) -43', 'a(n-13) +(-2/3)*a(n-17) +(-4/3)*a(n-18) -4*a(n-19) +(1/3)*a(n-20) -7/3', 'a(n-20)^2 +(-2/3)*a(n-17) +(-4/3)*a(n-18) +2*a(n-19) +(1/3)*a(n-20) +2/3', 'a(n-17)*a(n-20) +(-5/3)*a(n-17) +(-4/3)*a(n-18) +2*a(n-19) +(-2/3)*a(n-20) +8/3', 'a(n-19)^2 +(-4/3)*a(n-17) +(-2/3)*a(n-18) +a(n-19) +(2/3)*a(n-20) +4/3']
A027633: 
MB not reconst
truth: 
None

False  -  checked against website ground truth.     
False  -  "manual" check if equation is correct.    

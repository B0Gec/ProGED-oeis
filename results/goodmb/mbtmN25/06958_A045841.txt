
orders_used: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 14, 14, 14, 14, 14, 14, 15, 14, 15, 15, 15, 14, 15, 15, 15, 15, 16, 16, 14, 16, 16, 16, 14, 16, 16, 16, 17, 17, 14, 17, 17, 17, 17, 17, 17, 14, 18, 18, 18, 14, 18, 18, 18, 18, 18, 18, 19, 19, 19, 14, 19, 19, 19, 19, 19, 19, 20, 20, 20]
dasco's acc_1, acc_10: True, False is stored in is_reconst and is_check
n_input: 25
While total time consumed by now, scale:6959/10000, seq_id:A045841, order:20 took:
 67.4 seconds, i.e. 1.12 minutes or 0.019 hours.
CORELIST: False, METHOD: MB, SINDy: False (True also in case of MAVI), GROUND_TRUTH: False, SINDy_default: True, DEBUG: False, OEISformer: True
n_of_terms_ed: 200, N_OF_TERMS_ED: 200
Library: n, max_order 20, max_degree: 3, threshold: 0.1, 
n_more_terms: 10
Library: n, max_order 20, threshold: 0.1
  MB:  n_more_terms: 10 MAX_BITSIZE: 50

by degree: unknown_mb and order: 8.
eqs_explicit:
['a(n) = 2*a(n-20)']
non_linears:
['a(n-6)^2 +a(n-5)*a(n-8) -3*a(n-6)*a(n-8) -a(n-7)*a(n-8) +2*a(n-8)^2 -a(n-5) +a(n-7)', 'a(n-5)^2 +11*a(n-5)*a(n-8) -a(n-6)*a(n-8) +a(n-7)*a(n-8) +2*a(n-8)^2 -12*a(n-5) +9*a(n-6) -11*a(n-7) -32*a(n-8) +22', 'a(n-6)*a(n-7) +(7/3)*a(n-5)*a(n-8) +(-4/3)*a(n-6)*a(n-8) +(-5/3)*a(n-7)*a(n-8) +(4/3)*a(n-8)^2 +(-7/3)*a(n-5) +(4/3)*a(n-6) +(-1/3)*a(n-7) -4*a(n-8) +8/3', 'a(n-7)^2 +(7/3)*a(n-5)*a(n-8) +(-1/3)*a(n-6)*a(n-8) +(-11/3)*a(n-7)*a(n-8) +(4/3)*a(n-8)^2 +(-7/3)*a(n-5) +(7/3)*a(n-6) +(2/3)*a(n-7) -4*a(n-8) +2/3', 'a(n-5)*a(n-6) +(5/3)*a(n-5)*a(n-8) +(-2/3)*a(n-6)*a(n-8) +(2/3)*a(n-7)*a(n-8) +(2/3)*a(n-8)^2 +(-8/3)*a(n-5) +(2/3)*a(n-6) +(-8/3)*a(n-7) -6*a(n-8) +16/3', 'a(n-6)*a(n-8)^2 +(2/5)*a(n-5)*a(n-8) +(-7/5)*a(n-6)*a(n-8) +(6/5)*a(n-7)*a(n-8) -4*a(n-8)^2 +(-2/5)*a(n-5) +(2/5)*a(n-6) +(-6/5)*a(n-7) +(12/5)*a(n-8) +8/5', 'a(n-5)*a(n-8)^2 +(-7/5)*a(n-5)*a(n-8) +(2/5)*a(n-6)*a(n-8) +(-6/5)*a(n-7)*a(n-8) -2*a(n-8)^2 +(2/5)*a(n-5) +(-2/5)*a(n-6) +(6/5)*a(n-7) +(18/5)*a(n-8) -8/5', 'a(n-7)*a(n-8)^2 +(-2/5)*a(n-5)*a(n-8) +(2/5)*a(n-6)*a(n-8) +(-11/5)*a(n-7)*a(n-8) -2*a(n-8)^2 +(2/5)*a(n-5) +(-2/5)*a(n-6) +(6/5)*a(n-7) +(18/5)*a(n-8) -8/5', 'a(n-8)^3 +(-8/5)*a(n-5)*a(n-8) +(8/5)*a(n-6)*a(n-8) +(16/5)*a(n-7)*a(n-8) -7*a(n-8)^2 +(8/5)*a(n-5) +(-8/5)*a(n-6) +(-16/5)*a(n-7) +(22/5)*a(n-8) +8/5', 'a(n-5)*a(n-7) +(16/3)*a(n-5)*a(n-8) +(-1/3)*a(n-6)*a(n-8) +(-5/3)*a(n-7)*a(n-8) +(4/3)*a(n-8)^2 +(-16/3)*a(n-5) +(13/3)*a(n-6) +(-13/3)*a(n-7) -14*a(n-8) +26/3', 'a(n-7)^2 +a(n-6)*a(n-9) -3*a(n-7)*a(n-9) -a(n-8)*a(n-9) +2*a(n-9)^2 -a(n-6) +a(n-8)', 'a(n-5)*a(n-6) -4*a(n-6)*a(n-9) +2*a(n-7)*a(n-9) +3*a(n-8)*a(n-9) -2*a(n-9)^2 -a(n-5) +3*a(n-6) -5*a(n-7) -3*a(n-8) +6*a(n-9)', 'a(n-5)*a(n-9) -7*a(n-6)*a(n-9) +a(n-7)*a(n-9) +2*a(n-8)*a(n-9) -2*a(n-9)^2 +6*a(n-6) -6*a(n-7) +2*a(n-8) +14*a(n-9) -8', 'a(n-6)^2 +11*a(n-6)*a(n-9) -a(n-7)*a(n-9) +a(n-8)*a(n-9) +2*a(n-9)^2 -12*a(n-6) +9*a(n-7) -11*a(n-8) -32*a(n-9) +22', 'a(n-7)*a(n-8) +(7/3)*a(n-6)*a(n-9) +(-4/3)*a(n-7)*a(n-9) +(-5/3)*a(n-8)*a(n-9) +(4/3)*a(n-9)^2 +(-7/3)*a(n-6) +(4/3)*a(n-7) +(-1/3)*a(n-8) -4*a(n-9) +8/3', 'a(n-8)^2 +(7/3)*a(n-6)*a(n-9) +(-1/3)*a(n-7)*a(n-9) +(-11/3)*a(n-8)*a(n-9) +(4/3)*a(n-9)^2 +(-7/3)*a(n-6) +(7/3)*a(n-7) +(2/3)*a(n-8) -4*a(n-9) +2/3', 'a(n-6)*a(n-7) +(5/3)*a(n-6)*a(n-9) +(-2/3)*a(n-7)*a(n-9) +(2/3)*a(n-8)*a(n-9) +(2/3)*a(n-9)^2 +(-8/3)*a(n-6) +(2/3)*a(n-7) +(-8/3)*a(n-8) -6*a(n-9) +16/3', 'a(n-7)*a(n-9)^2 +(2/5)*a(n-6)*a(n-9) +(-7/5)*a(n-7)*a(n-9) +(6/5)*a(n-8)*a(n-9) -4*a(n-9)^2 +(-2/5)*a(n-6) +(2/5)*a(n-7) +(-6/5)*a(n-8) +(12/5)*a(n-9) +8/5', 'a(n-6)*a(n-9)^2 +(-7/5)*a(n-6)*a(n-9) +(2/5)*a(n-7)*a(n-9) +(-6/5)*a(n-8)*a(n-9) -2*a(n-9)^2 +(2/5)*a(n-6) +(-2/5)*a(n-7) +(6/5)*a(n-8) +(18/5)*a(n-9) -8/5', 'a(n-8)*a(n-9)^2 +(-2/5)*a(n-6)*a(n-9) +(2/5)*a(n-7)*a(n-9) +(-11/5)*a(n-8)*a(n-9) -2*a(n-9)^2 +(2/5)*a(n-6) +(-2/5)*a(n-7) +(6/5)*a(n-8) +(18/5)*a(n-9) -8/5', 'a(n-14)^2 -a(n-14)', 'a(n-13)*a(n-14) -a(n-13) -a(n-14) +1', 'a(n-9)^2 -a(n-5) +a(n-6) +a(n-8) -4*a(n-9) -a(n-11) -3*a(n-12) +4*a(n-13) +a(n-14) +1', 'a(n-8)*a(n-14) +(1/2)*a(n-5) +(-1/2)*a(n-6) +(-1/2)*a(n-8) +(1/2)*a(n-9) +(-3/2)*a(n-11) +(1/2)*a(n-12) +a(n-13) +(-1/2)*a(n-14) -1/2', 'a(n-10)*a(n-14) +(3/13)*a(n-5) +(-3/13)*a(n-6) +(-3/13)*a(n-8) +(9/13)*a(n-9) +(-6/13)*a(n-10) +(-10/13)*a(n-11) +(-2/13)*a(n-12) +(-2/13)*a(n-13) +(-2/13)*a(n-14)', 'a(n-10)*a(n-12) +(5/13)*a(n-5) +(-5/13)*a(n-6) +(-5/13)*a(n-8) +(15/13)*a(n-9) +(-10/13)*a(n-10) +(-8/13)*a(n-11) +(-38/13)*a(n-12) +(-12/13)*a(n-13) +(40/13)*a(n-14)', 'a(n-15)^2 -a(n-15)', 'a(n-14)^2 -a(n-14)', 'a(n-3) +2*a(n-13) -4*a(n-15) -2', 'a(n-14)*a(n-15) -a(n-14) -a(n-15) +1', 'a(n-13)*a(n-15) -a(n-14) -2*a(n-15) +1', 'a(n-13)*a(n-14) -a(n-13) -a(n-14) +1', 'a(n-12)*a(n-14) -a(n-13) -a(n-14) +a(n-15)', 'a(n-12)^2 -a(n-12) -2*a(n-13) +2*a(n-15)', 'a(n-2) +2*a(n-12) -2*a(n-14) +2*a(n-15) -4', 'a(n-1) +2*a(n-11) -2*a(n-13) -2*a(n-14) -4*a(n-15)', 'a(n-16)^2 -a(n-16)', 'a(n-14)*a(n-16) -a(n-16)', 'a(n-14)^2 -a(n-14)', 'a(n-15) +a(n-16) -1', 'a(n-4) +2*a(n-14) -4*a(n-16) -2', 'a(n-3) +2*a(n-13) +4*a(n-16) -6', 'a(n-13)*a(n-14) -a(n-13) -a(n-14) +1', 'a(n-13)^2 -a(n-13) -2*a(n-14) +2*a(n-16)', 'a(n-2) +2*a(n-12) -2*a(n-14) -2*a(n-16) -2', 'a(n-13)*a(n-16) -a(n-13) +a(n-14) -2*a(n-16) +1', 'a(n-15) -a(n-17)', 'a(n-17)^2 -a(n-17)', 'a(n-14)^2 -a(n-14)', 'a(n-16) +a(n-17) -1', 'a(n-5) -2*a(n-17) -2', 'a(n-4) +2*a(n-14) +4*a(n-17) -6', 'a(n-3) +2*a(n-13) -4*a(n-17) -2', 'a(n-14)*a(n-17) -a(n-14) -a(n-17) +1', 'a(n-13)*a(n-17) -a(n-14) -2*a(n-17) +1', 'a(n-13)*a(n-14) -a(n-13) -a(n-14) +1', 'a(n-16) -a(n-18)', 'a(n-18)^2 -a(n-18)', 'a(n-14)*a(n-18) -a(n-18)', 'a(n-14)^2 -a(n-14)', 'a(n-17) +a(n-18) -1', 'a(n-15) +a(n-18) -1', 'a(n-6) -2*a(n-18) -2', 'a(n-5) +2*a(n-18) -4', 'a(n-4) +2*a(n-14) -4*a(n-18) -2', 'a(n-3) +2*a(n-13) +4*a(n-18) -6', 'a(n-17) -a(n-19)', 'a(n-15) -a(n-19)', 'a(n-19)^2 -a(n-19)', 'a(n-14)^2 -a(n-14)', 'a(n-18) +a(n-19) -1', 'a(n-16) +a(n-19) -1', 'a(n-7) -2*a(n-19) -2', 'a(n-6) +2*a(n-19) -4', 'a(n-5) -2*a(n-19) -2', 'a(n-4) +2*a(n-14) +4*a(n-19) -6', 'a(n-18) -a(n-20)', 'a(n-16) -a(n-20)', 'a(n) -2*a(n-20)']
A045841: 
a(n) = 2*a(n-20)
truth: 
None

False  -  checked against website ground truth.     
True  -  "manual" check if equation is correct.    

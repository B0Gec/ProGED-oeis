
orders_used: [7, 7, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 7, 9, 9, 9, 9, 9, 9, 9, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11]
dasco's acc_1, acc_10: False, False is stored in is_reconst and is_check
n_input: 15
While total time consumed by now, scale:2411/10000, seq_id:A016640, order:20 took:
 24.6 seconds, i.e. 0.41 minutes or 0.007 hours.
CORELIST: False, METHOD: MB, SINDy: False (True also in case of MAVI), GROUND_TRUTH: False, SINDy_default: True, DEBUG: False, OEISformer: True
n_of_terms_ed: 200, N_OF_TERMS_ED: 200
Library: n, max_order 20, max_degree: 3, threshold: 0.1, 
n_more_terms: 10
Library: n, max_order 20, threshold: 0.1
  MB:  n_more_terms: 10 MAX_BITSIZE: 50

by degree: unknown_mb and order: 7.
eqs_explicit:
['a(n) = 14*a(n-11)/19 + 13*a(n-10)/19 + 6*a(n-9)/19 - 55/19']
non_linears:
['a(n-5)*a(n-7) -3*a(n-5) -3*a(n-7) +9', 'n +(-207/269)*a(n-1) +(-204/269)*a(n-2) +(-336/269)*a(n-3) +(-182/269)*a(n-4) +(-358/269)*a(n-5) +(59/269)*a(n-6) +(-14/269)*a(n-7) +790/269', 'a(n-6)*a(n-8) -3*a(n-6) -3*a(n-8) +9', 'a(n-5)*a(n-7) -3*a(n-5) -3*a(n-7) +9', 'a(n-6)^2 +(-1/12)*a(n-3) +(17/24)*a(n-4) +(-11/24)*a(n-5) +(-25/6)*a(n-6) +(1/6)*a(n-7) +(5/24)*a(n-8) +43/24', 'a(n-4)*a(n-8) +(-19/24)*a(n-3) +(-109/48)*a(n-4) +(31/48)*a(n-5) +(11/12)*a(n-6) +(-5/12)*a(n-7) +(-49/48)*a(n-8) +97/48', 'a(n-4)*a(n-6) +(-3/44)*a(n-3) +(-353/88)*a(n-4) +(-5/88)*a(n-5) +(-63/22)*a(n-6) +(-7/22)*a(n-7) +(-37/88)*a(n-8) +1253/88', 'a(n-3)*a(n-8) +(-71/66)*a(n-3) +(167/132)*a(n-4) +(-15/44)*a(n-5) +(16/33)*a(n-6) +(25/33)*a(n-7) +(-111/44)*a(n-8) -647/132', 'a(n-6)*a(n-7) +(-17/132)*a(n-3) +(3/88)*a(n-4) +(-131/264)*a(n-5) +(-137/66)*a(n-6) +(-67/22)*a(n-7) +(-19/264)*a(n-8) +729/88', 'a(n-5)*a(n-6) +(43/132)*a(n-3) +(83/88)*a(n-4) +(-515/264)*a(n-5) +(-197/66)*a(n-6) +(9/22)*a(n-7) +(149/264)*a(n-8) -71/88', 'a(n-4)^2 +(13/66)*a(n-3) +(-509/132)*a(n-4) +(-37/132)*a(n-5) +(-35/33)*a(n-6) +(23/33)*a(n-7) +(43/132)*a(n-8) +173/132', 'n +(51/88)*a(n-3) +(237/176)*a(n-4) +(-47/176)*a(n-5) +(-7/44)*a(n-6) +(53/44)*a(n-7) +(145/176)*a(n-8) -3745/176', 'a(n-7)*a(n-9) -3*a(n-7) -3*a(n-9) +9', 'a(n-6)*a(n-8) -3*a(n-6) -3*a(n-8) +9', 'a(n-5)*a(n-7) -3*a(n-5) -3*a(n-7) +9', 'n +(-29/4)*a(n-5) +(-3/4)*a(n-6) +a(n-7) +(-3/2)*a(n-8) +(-11/4)*a(n-9) +89/4', 'a(n-5)^2 +(-61/9)*a(n-5) +(-4/9)*a(n-6) +(-2/3)*a(n-7) +(-2/9)*a(n-8) +(-8/9)*a(n-9) +148/9', 'a(n-4) +(89/6)*a(n-5) +(5/6)*a(n-6) -2*a(n-7) +(14/3)*a(n-8) +(37/6)*a(n-9) -461/6', 'a(n-6)^2 +(-77/6)*a(n-5) +(-29/6)*a(n-6) +2*a(n-7) +(-11/3)*a(n-8) +(-31/6)*a(n-9) +389/6', 'a(n-6)*a(n-7) +(-35/9)*a(n-5) +(-20/9)*a(n-6) +(-7/3)*a(n-7) +(-10/9)*a(n-8) +(-13/9)*a(n-9) +218/9', 'a(n-8)^2 +(385/6)*a(n-5) +(7/6)*a(n-6) -12*a(n-7) +(28/3)*a(n-8) +(167/6)*a(n-9) -1741/6', 'a(n-7)*a(n-8) +(35/18)*a(n-5) +(-7/18)*a(n-6) +(-7/3)*a(n-7) +(-22/9)*a(n-8) +(13/18)*a(n-9) -29/18', 'a(n-8)*a(n-10) -3*a(n-8) -3*a(n-10) +9', 'a(n-7)*a(n-9) -3*a(n-7) -3*a(n-9) +9', 'a(n-7)^2 +(-91/23)*a(n-7) +(2/23)*a(n-8) +(4/23)*a(n-10) +52/23', 'a(n-8)^2 +(-12/23)*a(n-7) +(-93/23)*a(n-8) +(-2/23)*a(n-10) +112/23', 'a(n-7)*a(n-8) +(-45/23)*a(n-7) +(-67/23)*a(n-8) +(4/23)*a(n-10) +121/23', 'a(n-7)*a(n-10) +(-64/23)*a(n-7) +(10/23)*a(n-8) +(-49/23)*a(n-10) +122/23', 'a(n-10)^2 +(-30/23)*a(n-7) +(-60/23)*a(n-8) +(-235/23)*a(n-10) +648/23', 'a(n-9)*a(n-10) +(6/23)*a(n-7) +(-11/23)*a(n-8) -2*a(n-9) +(-68/23)*a(n-10) +151/23', 'a(n-8)*a(n-9) +(-12/23)*a(n-7) +(-47/23)*a(n-8) -3*a(n-9) +(-2/23)*a(n-10) +181/23', 'a(n-9)^2 +(-74/23)*a(n-7) +(-56/23)*a(n-8) -9*a(n-9) +(26/23)*a(n-10) +522/23', 'a(n-9)*a(n-11) -3*a(n-9) -3*a(n-11) +9', 'a(n-7) +(-7/19)*a(n-9) +(7/19)*a(n-10) +(9/19)*a(n-11) -91/19', 'a(n-5) +(-6/19)*a(n-9) +(6/19)*a(n-10) +(5/19)*a(n-11) -97/19', 'a(n-6) +(15/19)*a(n-9) +(4/19)*a(n-10) +(-3/19)*a(n-11) -90/19', 'n +(14/19)*a(n-9) +(5/19)*a(n-10) +(1/19)*a(n-11) -293/19', 'a(n) +(-6/19)*a(n-9) +(-13/19)*a(n-10) +(-14/19)*a(n-11) +55/19']
A016640: 
a(n) = 14*a(n-11)/19 + 13*a(n-10)/19 + 6*a(n-9)/19 - 55/19
truth: 
None

False  -  checked against website ground truth.     
False  -  "manual" check if equation is correct.    

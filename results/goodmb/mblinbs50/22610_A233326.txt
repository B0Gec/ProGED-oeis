
orders_used: [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]
While total time consumed by now, scale:22611/27236, seq_id:A233326, order:20 took:
 56.0 seconds, i.e. 0.93 minutes or 0.016 hours.
CORELIST: False, METHOD: MB, SINDy: False (True also in case of MAVI), GROUND_TRUTH: True, SINDy_default: True, DEBUG: False, OEISformer: False
n_of_terms_ed: 200, N_OF_TERMS_ED: 200
Library: non, max_order 20, max_degree: 1, threshold: 0.1, 
n_more_terms: 10
Library: non, max_order 20, threshold: 0.1MB: 
  n_more_terms: 10 MAX_BITSIZE: 50

by degree: unknown_mb and order: 1.
non_linears:
['a(n) -7*a(n-1) -8', 'a(n-1) -7*a(n-2) -8', 'a(n) -49*a(n-2) -64', 'a(n-2) -7*a(n-3) -8', 'a(n-1) -49*a(n-3) -64', 'a(n) -343*a(n-3) -456', 'a(n-3) -7*a(n-4) -8', 'a(n-2) -49*a(n-4) -64', 'a(n-1) -343*a(n-4) -456', 'a(n) -2401*a(n-4) -3200', 'a(n-4) -7*a(n-5) -8', 'a(n-3) -49*a(n-5) -64', 'a(n-2) -343*a(n-5) -456', 'a(n-1) -2401*a(n-5) -3200', 'a(n) -16807*a(n-5) -22408', 'a(n-5) -7*a(n-6) -8', 'a(n-4) -49*a(n-6) -64', 'a(n-3) -343*a(n-6) -456', 'a(n-2) -2401*a(n-6) -3200', 'a(n-1) -16807*a(n-6) -22408', 'a(n) -117649*a(n-6) -156864', 'a(n-6) -7*a(n-7) -8', 'a(n-5) -49*a(n-7) -64', 'a(n-4) -343*a(n-7) -456', 'a(n-3) -2401*a(n-7) -3200', 'a(n-2) -16807*a(n-7) -22408', 'a(n-1) -117649*a(n-7) -156864', 'a(n) -823543*a(n-7) -1098056', 'a(n-7) -7*a(n-8) -8', 'a(n-6) -49*a(n-8) -64', 'a(n-5) -343*a(n-8) -456', 'a(n-4) -2401*a(n-8) -3200', 'a(n-3) -16807*a(n-8) -22408', 'a(n-2) -117649*a(n-8) -156864', 'a(n-1) -823543*a(n-8) -1098056', 'a(n) -5764801*a(n-8) -7686400', 'a(n-8) -7*a(n-9) -8', 'a(n-7) -49*a(n-9) -64', 'a(n-6) -343*a(n-9) -456', 'a(n-5) -2401*a(n-9) -3200', 'a(n-4) -16807*a(n-9) -22408', 'a(n-3) -117649*a(n-9) -156864', 'a(n-2) -823543*a(n-9) -1098056', 'a(n-1) -5764801*a(n-9) -7686400', 'a(n) -40353607*a(n-9) -53804808', 'a(n-9) -7*a(n-10) -8', 'a(n-8) -49*a(n-10) -64', 'a(n-7) -343*a(n-10) -456', 'a(n-6) -2401*a(n-10) -3200', 'a(n-5) -16807*a(n-10) -22408', 'a(n-4) -117649*a(n-10) -156864', 'a(n-3) -823543*a(n-10) -1098056', 'a(n-2) -5764801*a(n-10) -7686400', 'a(n-1) -40353607*a(n-10) -53804808', 'a(n) -282475249*a(n-10) -376633664', 'a(n-10) -7*a(n-11) -8', 'a(n-9) -49*a(n-11) -64', 'a(n-8) -343*a(n-11) -456', 'a(n-7) -2401*a(n-11) -3200', 'a(n-6) -16807*a(n-11) -22408', 'a(n-5) -117649*a(n-11) -156864', 'a(n-4) -823543*a(n-11) -1098056', 'a(n-3) -5764801*a(n-11) -7686400', 'a(n-2) -40353607*a(n-11) -53804808', 'a(n-1) -282475249*a(n-11) -376633664', 'a(n-11) -7*a(n-12) -8', 'a(n-10) -49*a(n-12) -64', 'a(n-9) -343*a(n-12) -456', 'a(n-8) -2401*a(n-12) -3200', 'a(n-7) -16807*a(n-12) -22408', 'a(n-6) -117649*a(n-12) -156864', 'a(n-5) -823543*a(n-12) -1098056', 'a(n-4) -5764801*a(n-12) -7686400', 'a(n-3) -40353607*a(n-12) -53804808', 'a(n-2) -282475249*a(n-12) -376633664', 'a(n-12) -7*a(n-13) -8', 'a(n-11) -49*a(n-13) -64', 'a(n-10) -343*a(n-13) -456', 'a(n-9) -2401*a(n-13) -3200', 'a(n-8) -16807*a(n-13) -22408', 'a(n-7) -117649*a(n-13) -156864', 'a(n-6) -823543*a(n-13) -1098056', 'a(n-5) -5764801*a(n-13) -7686400', 'a(n-4) -40353607*a(n-13) -53804808', 'a(n-3) -282475249*a(n-13) -376633664', 'a(n-13) -7*a(n-14) -8', 'a(n-12) -49*a(n-14) -64', 'a(n-11) -343*a(n-14) -456', 'a(n-10) -2401*a(n-14) -3200', 'a(n-9) -16807*a(n-14) -22408', 'a(n-8) -117649*a(n-14) -156864', 'a(n-7) -823543*a(n-14) -1098056', 'a(n-6) -5764801*a(n-14) -7686400', 'a(n-5) -40353607*a(n-14) -53804808', 'a(n-4) -282475249*a(n-14) -376633664', 'a(n-14) -7*a(n-15) -8', 'a(n-13) -49*a(n-15) -64', 'a(n-12) -343*a(n-15) -456', 'a(n-11) -2401*a(n-15) -3200', 'a(n-10) -16807*a(n-15) -22408', 'a(n-9) -117649*a(n-15) -156864', 'a(n-8) -823543*a(n-15) -1098056', 'a(n-7) -5764801*a(n-15) -7686400', 'a(n-6) -40353607*a(n-15) -53804808', 'a(n-5) -282475249*a(n-15) -376633664', 'a(n-15) -7*a(n-16) -8', 'a(n-14) -49*a(n-16) -64', 'a(n-13) -343*a(n-16) -456', 'a(n-12) -2401*a(n-16) -3200', 'a(n-11) -16807*a(n-16) -22408', 'a(n-10) -117649*a(n-16) -156864', 'a(n-9) -823543*a(n-16) -1098056', 'a(n-8) -5764801*a(n-16) -7686400', 'a(n-7) -40353607*a(n-16) -53804808', 'a(n-6) -282475249*a(n-16) -376633664', 'a(n-16) -7*a(n-17) -8', 'a(n-15) -49*a(n-17) -64', 'a(n-14) -343*a(n-17) -456', 'a(n-13) -2401*a(n-17) -3200', 'a(n-12) -16807*a(n-17) -22408', 'a(n-11) -117649*a(n-17) -156864', 'a(n-10) -823543*a(n-17) -1098056', 'a(n-9) -5764801*a(n-17) -7686400', 'a(n-8) -40353607*a(n-17) -53804808', 'a(n-7) -282475249*a(n-17) -376633664', 'a(n-17) -7*a(n-18) -8', 'a(n-16) -49*a(n-18) -64', 'a(n-15) -343*a(n-18) -456', 'a(n-14) -2401*a(n-18) -3200', 'a(n-13) -16807*a(n-18) -22408', 'a(n-12) -117649*a(n-18) -156864', 'a(n-11) -823543*a(n-18) -1098056', 'a(n-10) -5764801*a(n-18) -7686400', 'a(n-9) -40353607*a(n-18) -53804808', 'a(n-8) -282475249*a(n-18) -376633664', 'a(n-18) -7*a(n-19) -8', 'a(n-17) -49*a(n-19) -64', 'a(n-16) -343*a(n-19) -456', 'a(n-15) -2401*a(n-19) -3200', 'a(n-14) -16807*a(n-19) -22408', 'a(n-13) -117649*a(n-19) -156864', 'a(n-12) -823543*a(n-19) -1098056', 'a(n-11) -5764801*a(n-19) -7686400', 'a(n-10) -40353607*a(n-19) -53804808', 'a(n-9) -282475249*a(n-19) -376633664', 'a(n-19) -7*a(n-20) -8', 'a(n-18) -49*a(n-20) -64', 'a(n-17) -343*a(n-20) -456', 'a(n-16) -2401*a(n-20) -3200', 'a(n-15) -16807*a(n-20) -22408', 'a(n-14) -117649*a(n-20) -156864', 'a(n-13) -823543*a(n-20) -1098056', 'a(n-12) -5764801*a(n-20) -7686400', 'a(n-11) -40353607*a(n-20) -53804808', 'a(n-10) -282475249*a(n-20) -376633664']
A233326: 
MB not reconst
truth: 
a(n) = 8*a(n - 1) + -7*a(n - 2),  
a(0) = 1, a(1) = 15

False  -  checked against website ground truth.     
True  -  "manual" check if equation is correct.    


orders_used: [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]
While total time consumed by now, scale:26074/27236, seq_id:A305062, order:20 took:
 32.2 seconds, i.e. 0.54 minutes or 0.009 hours.
CORELIST: False, METHOD: MB, SINDy: False (True also in case of MAVI), GROUND_TRUTH: True, SINDy_default: True, DEBUG: False, OEISformer: False
n_of_terms_ed: 200, N_OF_TERMS_ED: 200
Library: non, max_order 20, max_degree: 1, threshold: 0.1, 
n_more_terms: 10
Library: non, max_order 20, threshold: 0.1MB: 
  n_more_terms: 10 MAX_BITSIZE: 50

by degree: unknown_mb and order: 1.
non_linears:
['a(n) -2*a(n-1) +80', 'a(n-1) -2*a(n-2) +80', 'a(n) -4*a(n-2) +240', 'a(n-2) -2*a(n-3) +80', 'a(n-1) -4*a(n-3) +240', 'a(n) -8*a(n-3) +560', 'a(n-3) -2*a(n-4) +80', 'a(n-2) -4*a(n-4) +240', 'a(n-1) -8*a(n-4) +560', 'a(n) -16*a(n-4) +1200', 'a(n-4) -2*a(n-5) +80', 'a(n-3) -4*a(n-5) +240', 'a(n-2) -8*a(n-5) +560', 'a(n-1) -16*a(n-5) +1200', 'a(n) -32*a(n-5) +2480', 'a(n-5) -2*a(n-6) +80', 'a(n-4) -4*a(n-6) +240', 'a(n-3) -8*a(n-6) +560', 'a(n-2) -16*a(n-6) +1200', 'a(n-1) -32*a(n-6) +2480', 'a(n) -64*a(n-6) +5040', 'a(n-6) -2*a(n-7) +80', 'a(n-5) -4*a(n-7) +240', 'a(n-4) -8*a(n-7) +560', 'a(n-3) -16*a(n-7) +1200', 'a(n-2) -32*a(n-7) +2480', 'a(n-1) -64*a(n-7) +5040', 'a(n) -128*a(n-7) +10160', 'a(n-7) -2*a(n-8) +80', 'a(n-6) -4*a(n-8) +240', 'a(n-5) -8*a(n-8) +560', 'a(n-4) -16*a(n-8) +1200', 'a(n-3) -32*a(n-8) +2480', 'a(n-2) -64*a(n-8) +5040', 'a(n-1) -128*a(n-8) +10160', 'a(n) -256*a(n-8) +20400', 'a(n-8) -2*a(n-9) +80', 'a(n-7) -4*a(n-9) +240', 'a(n-6) -8*a(n-9) +560', 'a(n-5) -16*a(n-9) +1200', 'a(n-4) -32*a(n-9) +2480', 'a(n-3) -64*a(n-9) +5040', 'a(n-2) -128*a(n-9) +10160', 'a(n-1) -256*a(n-9) +20400', 'a(n) -512*a(n-9) +40880', 'a(n-9) -2*a(n-10) +80', 'a(n-8) -4*a(n-10) +240', 'a(n-7) -8*a(n-10) +560', 'a(n-6) -16*a(n-10) +1200', 'a(n-5) -32*a(n-10) +2480', 'a(n-4) -64*a(n-10) +5040', 'a(n-3) -128*a(n-10) +10160', 'a(n-2) -256*a(n-10) +20400', 'a(n-1) -512*a(n-10) +40880', 'a(n) -1024*a(n-10) +81840', 'a(n-10) -2*a(n-11) +80', 'a(n-9) -4*a(n-11) +240', 'a(n-8) -8*a(n-11) +560', 'a(n-7) -16*a(n-11) +1200', 'a(n-6) -32*a(n-11) +2480', 'a(n-5) -64*a(n-11) +5040', 'a(n-4) -128*a(n-11) +10160', 'a(n-3) -256*a(n-11) +20400', 'a(n-2) -512*a(n-11) +40880', 'a(n-1) -1024*a(n-11) +81840', 'a(n-11) -2*a(n-12) +80', 'a(n-10) -4*a(n-12) +240', 'a(n-9) -8*a(n-12) +560', 'a(n-8) -16*a(n-12) +1200', 'a(n-7) -32*a(n-12) +2480', 'a(n-6) -64*a(n-12) +5040', 'a(n-5) -128*a(n-12) +10160', 'a(n-4) -256*a(n-12) +20400', 'a(n-3) -512*a(n-12) +40880', 'a(n-2) -1024*a(n-12) +81840', 'a(n-12) -2*a(n-13) +80', 'a(n-11) -4*a(n-13) +240', 'a(n-10) -8*a(n-13) +560', 'a(n-9) -16*a(n-13) +1200', 'a(n-8) -32*a(n-13) +2480', 'a(n-7) -64*a(n-13) +5040', 'a(n-6) -128*a(n-13) +10160', 'a(n-5) -256*a(n-13) +20400', 'a(n-4) -512*a(n-13) +40880', 'a(n-3) -1024*a(n-13) +81840', 'a(n-13) -2*a(n-14) +80', 'a(n-12) -4*a(n-14) +240', 'a(n-11) -8*a(n-14) +560', 'a(n-10) -16*a(n-14) +1200', 'a(n-9) -32*a(n-14) +2480', 'a(n-8) -64*a(n-14) +5040', 'a(n-7) -128*a(n-14) +10160', 'a(n-6) -256*a(n-14) +20400', 'a(n-5) -512*a(n-14) +40880', 'a(n-4) -1024*a(n-14) +81840', 'a(n-14) -2*a(n-15) +80', 'a(n-13) -4*a(n-15) +240', 'a(n-12) -8*a(n-15) +560', 'a(n-11) -16*a(n-15) +1200', 'a(n-10) -32*a(n-15) +2480', 'a(n-9) -64*a(n-15) +5040', 'a(n-8) -128*a(n-15) +10160', 'a(n-7) -256*a(n-15) +20400', 'a(n-6) -512*a(n-15) +40880', 'a(n-5) -1024*a(n-15) +81840', 'a(n-15) -2*a(n-16) +80', 'a(n-14) -4*a(n-16) +240', 'a(n-13) -8*a(n-16) +560', 'a(n-12) -16*a(n-16) +1200', 'a(n-11) -32*a(n-16) +2480', 'a(n-10) -64*a(n-16) +5040', 'a(n-9) -128*a(n-16) +10160', 'a(n-8) -256*a(n-16) +20400', 'a(n-7) -512*a(n-16) +40880', 'a(n-6) -1024*a(n-16) +81840', 'a(n-16) -2*a(n-17) +80', 'a(n-15) -4*a(n-17) +240', 'a(n-14) -8*a(n-17) +560', 'a(n-13) -16*a(n-17) +1200', 'a(n-12) -32*a(n-17) +2480', 'a(n-11) -64*a(n-17) +5040', 'a(n-10) -128*a(n-17) +10160', 'a(n-9) -256*a(n-17) +20400', 'a(n-8) -512*a(n-17) +40880', 'a(n-7) -1024*a(n-17) +81840', 'a(n-17) -2*a(n-18) +80', 'a(n-16) -4*a(n-18) +240', 'a(n-15) -8*a(n-18) +560', 'a(n-14) -16*a(n-18) +1200', 'a(n-13) -32*a(n-18) +2480', 'a(n-12) -64*a(n-18) +5040', 'a(n-11) -128*a(n-18) +10160', 'a(n-10) -256*a(n-18) +20400', 'a(n-9) -512*a(n-18) +40880', 'a(n-8) -1024*a(n-18) +81840', 'a(n-18) -2*a(n-19) +80', 'a(n-17) -4*a(n-19) +240', 'a(n-16) -8*a(n-19) +560', 'a(n-15) -16*a(n-19) +1200', 'a(n-14) -32*a(n-19) +2480', 'a(n-13) -64*a(n-19) +5040', 'a(n-12) -128*a(n-19) +10160', 'a(n-11) -256*a(n-19) +20400', 'a(n-10) -512*a(n-19) +40880', 'a(n-9) -1024*a(n-19) +81840', 'a(n-19) -2*a(n-20) +80', 'a(n-18) -4*a(n-20) +240', 'a(n-17) -8*a(n-20) +560', 'a(n-16) -16*a(n-20) +1200', 'a(n-15) -32*a(n-20) +2480', 'a(n-14) -64*a(n-20) +5040', 'a(n-13) -128*a(n-20) +10160', 'a(n-12) -256*a(n-20) +20400', 'a(n-11) -512*a(n-20) +40880', 'a(n-10) -1024*a(n-20) +81840']
A305062: 
MB not reconst
truth: 
a(n) = 3*a(n - 1) + -2*a(n - 2),  
a(0) = 176, a(1) = 272

False  -  checked against website ground truth.     
True  -  "manual" check if equation is correct.    


orders_used: [3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12]
dasco's acc_1, acc_10: True, False is stored in is_reconst and is_check
n_input: 25
While total time consumed by now, scale:9532/10000, seq_id:A059563, order:20 took:
 57.0 seconds, i.e. 0.95 minutes or 0.016 hours.
CORELIST: False, METHOD: MB, SINDy: False (True also in case of MAVI), GROUND_TRUTH: False, SINDy_default: True, DEBUG: False, OEISformer: True
n_of_terms_ed: 200, N_OF_TERMS_ED: 200
Library: n, max_order 20, max_degree: 3, threshold: 0.1, 
n_more_terms: 10
Library: n, max_order 20, threshold: 0.1
  MB:  n_more_terms: 10 MAX_BITSIZE: 50

by degree: unknown_mb and order: 3.
eqs_explicit:
['a(n) = a(n-12) + 37']
non_linears:
['a(n-2)*a(n-3) -a(n-3)^2 -33*a(n-2) +30*a(n-3) +99', 'a(n-2)^2 -a(n-3)^2 -73*a(n-2) +67*a(n-3) +210', 'n*a(n-2) -n*a(n-3) -3*n -13*a(n-2) +13*a(n-3) +39', 'n^2 +(-2/3)*n*a(n-3) +(1/9)*a(n-3)^2 +(-11/3)*n +(11/9)*a(n-3) +10/3', 'a(n-3)*a(n-4) -a(n-4)^2 -33*a(n-3) +30*a(n-4) +99', 'a(n-3)^2 -a(n-4)^2 -73*a(n-3) +67*a(n-4) +210', 'n*a(n-3) -n*a(n-4) -3*n -14*a(n-3) +14*a(n-4) +42', 'a(n-2)*a(n-4) -a(n-4)^2 -30*a(n-2) -3*a(n-3) +27*a(n-4) +189', 'a(n-2)^2 -a(n-4)^2 -73*a(n-2) -6*a(n-3) +67*a(n-4) +420', 'a(n-2)*a(n-3) -a(n-4)^2 -33*a(n-2) -43*a(n-3) +67*a(n-4) +309', 'n^2 +(-2/3)*n*a(n-4) +(1/9)*a(n-4)^2 +(-17/3)*n +(17/9)*a(n-4) +8', 'n*a(n-2) -n*a(n-4) -6*n -13*a(n-2) -a(n-3) +14*a(n-4) +81', 'a(n-4)*a(n-5) -a(n-5)^2 -33*a(n-4) +30*a(n-5) +99', 'a(n-4)^2 -a(n-5)^2 -73*a(n-4) +67*a(n-5) +210', 'n*a(n-4) -n*a(n-5) -3*n -15*a(n-4) +15*a(n-5) +45', 'a(n-3)*a(n-5) -a(n-5)^2 -30*a(n-3) -3*a(n-4) +27*a(n-5) +189', 'a(n-3)^2 -a(n-5)^2 -73*a(n-3) -6*a(n-4) +67*a(n-5) +420', 'a(n-3)*a(n-4) -a(n-5)^2 -33*a(n-3) -43*a(n-4) +67*a(n-5) +309', 'n^2 +(-2/3)*n*a(n-5) +(1/9)*a(n-5)^2 +(-23/3)*n +(23/9)*a(n-5) +44/3', 'n*a(n-3) -n*a(n-5) -6*n -14*a(n-3) -a(n-4) +15*a(n-5) +87', 'a(n-2)*a(n-5) -a(n-5)^2 -27*a(n-2) -3*a(n-3) -3*a(n-4) +24*a(n-5) +270', 'a(n-2)^2 -a(n-5)^2 -73*a(n-2) -6*a(n-3) -6*a(n-4) +67*a(n-5) +630', 'a(n-5)*a(n-6) -a(n-6)^2 -33*a(n-5) +30*a(n-6) +99', 'a(n-5)^2 -a(n-6)^2 -73*a(n-5) +67*a(n-6) +210', 'n*a(n-5) -n*a(n-6) -3*n -16*a(n-5) +16*a(n-6) +48', 'a(n-4)*a(n-6) -a(n-6)^2 -30*a(n-4) -3*a(n-5) +27*a(n-6) +189', 'a(n-4)^2 -a(n-6)^2 -73*a(n-4) -6*a(n-5) +67*a(n-6) +420', 'a(n-4)*a(n-5) -a(n-6)^2 -33*a(n-4) -43*a(n-5) +67*a(n-6) +309', 'n^2 +(-2/3)*n*a(n-6) +(1/9)*a(n-6)^2 +(-29/3)*n +(29/9)*a(n-6) +70/3', 'n*a(n-4) -n*a(n-6) -6*n -15*a(n-4) -a(n-5) +16*a(n-6) +93', 'a(n-3)*a(n-6) -a(n-6)^2 -27*a(n-3) -3*a(n-4) -3*a(n-5) +24*a(n-6) +270', 'a(n-3)^2 -a(n-6)^2 -73*a(n-3) -6*a(n-4) -6*a(n-5) +67*a(n-6) +630', 'a(n-6)*a(n-7) -a(n-7)^2 -33*a(n-6) +30*a(n-7) +99', 'a(n-6)^2 -a(n-7)^2 -73*a(n-6) +67*a(n-7) +210', 'n*a(n-6) -n*a(n-7) -3*n -17*a(n-6) +17*a(n-7) +51', 'a(n-5)*a(n-7) -a(n-7)^2 -30*a(n-5) -3*a(n-6) +27*a(n-7) +189', 'a(n)*a(n-6) -a(n)*a(n-7) -3*a(n) -55*a(n-6) +55*a(n-7) +165', 'a(n-5)^2 -a(n-7)^2 -73*a(n-5) -6*a(n-6) +67*a(n-7) +420', 'a(n)^2 -2*a(n)*a(n-7) +a(n-7)^2 -43*a(n) +43*a(n-7) +462', 'a(n-5)*a(n-6) -a(n-7)^2 -33*a(n-5) -43*a(n-6) +67*a(n-7) +309', 'n^2 +(-2/3)*n*a(n-7) +(1/9)*a(n-7)^2 +(-35/3)*n +(35/9)*a(n-7) +34', 'n*a(n-5) -n*a(n-7) -6*n -16*a(n-5) -a(n-6) +17*a(n-7) +99', 'a(n-7)*a(n-8) -a(n-8)^2 -33*a(n-7) +30*a(n-8) +99', 'a(n-7)^2 -a(n-8)^2 -73*a(n-7) +67*a(n-8) +210', 'n*a(n-7) -n*a(n-8) -3*n -18*a(n-7) +18*a(n-8) +54', 'a(n-6)*a(n-8) -a(n-8)^2 -30*a(n-6) -3*a(n-7) +27*a(n-8) +189', 'a(n-1)*a(n-7) -a(n-1)*a(n-8) -3*a(n-1) -55*a(n-7) +55*a(n-8) +165', 'a(n)*a(n-7) -a(n)*a(n-8) -3*a(n) -58*a(n-7) +58*a(n-8) +174', 'a(n-6)^2 -a(n-8)^2 -73*a(n-6) -6*a(n-7) +67*a(n-8) +420', 'a(n-1)^2 -2*a(n-1)*a(n-8) +a(n-8)^2 -43*a(n-1) +43*a(n-8) +462', 'a(n)^2 -2*a(n)*a(n-8) +a(n-8)^2 -49*a(n) +49*a(n-8) +600', 'a(n-6)*a(n-7) -a(n-8)^2 -33*a(n-6) -43*a(n-7) +67*a(n-8) +309', 'a(n-8)*a(n-9) -a(n-9)^2 -33*a(n-8) +30*a(n-9) +99', 'a(n-8)^2 -a(n-9)^2 -73*a(n-8) +67*a(n-9) +210', 'n*a(n-8) -n*a(n-9) -3*n -19*a(n-8) +19*a(n-9) +57', 'a(n-7)*a(n-9) -a(n-9)^2 -30*a(n-7) -3*a(n-8) +27*a(n-9) +189', 'a(n-1)*a(n-8) -a(n-1)*a(n-9) -3*a(n-1) -58*a(n-8) +58*a(n-9) +174', 'a(n)*a(n-8) -a(n)*a(n-9) -3*a(n) -61*a(n-8) +61*a(n-9) +183', 'a(n-7)^2 -a(n-9)^2 -73*a(n-7) -6*a(n-8) +67*a(n-9) +420', 'a(n-1)^2 -2*a(n-1)*a(n-9) +a(n-9)^2 -49*a(n-1) +49*a(n-9) +600', 'a(n)^2 -2*a(n)*a(n-9) +a(n-9)^2 -55*a(n) +55*a(n-9) +756', 'a(n-7)*a(n-8) -a(n-9)^2 -33*a(n-7) -43*a(n-8) +67*a(n-9) +309', 'a(n-9)*a(n-10) -a(n-10)^2 -33*a(n-9) +30*a(n-10) +99', 'a(n-9)^2 -a(n-10)^2 -73*a(n-9) +67*a(n-10) +210', 'a(n-8)*a(n-10) -a(n-10)^2 -30*a(n-8) -3*a(n-9) +27*a(n-10) +189', 'a(n-1)*a(n-9) -a(n-1)*a(n-10) -3*a(n-1) -61*a(n-9) +61*a(n-10) +183', 'a(n-8)^2 -a(n-10)^2 -73*a(n-8) -6*a(n-9) +67*a(n-10) +420', 'a(n-1)^2 -2*a(n-1)*a(n-10) +a(n-10)^2 -55*a(n-1) +55*a(n-10) +756', 'a(n-8)*a(n-9) -a(n-10)^2 -33*a(n-8) -43*a(n-9) +67*a(n-10) +309', 'a(n-7)*a(n-10) -a(n-10)^2 -27*a(n-7) -3*a(n-8) -3*a(n-9) +24*a(n-10) +270', 'a(n-1)*a(n-8) -a(n-1)*a(n-10) -6*a(n-1) -58*a(n-8) -3*a(n-9) +61*a(n-10) +357', 'a(n-7)^2 -a(n-10)^2 -73*a(n-7) -6*a(n-8) -6*a(n-9) +67*a(n-10) +630', 'a(n-10)*a(n-11) -a(n-11)^2 -33*a(n-10) +30*a(n-11) +99', 'a(n-10)^2 -a(n-11)^2 -73*a(n-10) +67*a(n-11) +210', 'a(n-9)*a(n-11) -a(n-11)^2 -30*a(n-9) -3*a(n-10) +27*a(n-11) +189', 'a(n-9)^2 -a(n-11)^2 -73*a(n-9) -6*a(n-10) +67*a(n-11) +420', 'a(n-9)*a(n-10) -a(n-11)^2 -33*a(n-9) -43*a(n-10) +67*a(n-11) +309', 'a(n-8)*a(n-11) -a(n-11)^2 -27*a(n-8) -3*a(n-9) -3*a(n-10) +24*a(n-11) +270', 'a(n-8)^2 -a(n-11)^2 -73*a(n-8) -6*a(n-9) -6*a(n-10) +67*a(n-11) +630', 'a(n-8)*a(n-10) -a(n-11)^2 -30*a(n-8) -3*a(n-9) -46*a(n-10) +67*a(n-11) +399', 'a(n-8)*a(n-9) -a(n-11)^2 -33*a(n-8) -43*a(n-9) -6*a(n-10) +67*a(n-11) +519', 'a(n-7)*a(n-11) -a(n-11)^2 -24*a(n-7) -3*a(n-8) -3*a(n-9) -3*a(n-10) +21*a(n-11) +342', 'a(n) -a(n-12) -37']
A059563: 
a(n) = a(n-12) + 37
truth: 
None

False  -  checked against website ground truth.     
True  -  "manual" check if equation is correct.    

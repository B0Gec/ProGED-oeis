
orders_used: [8, 9, 10, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 17, 16, 19, 19, 18, 17, 20, 20, 20, 20, 19, 20, 20, 20, 20]
dasco's acc_1, acc_10: False, False is stored in is_reconst and is_check
n_input: 25
While total time consumed by now, scale:8709/10000, seq_id:A054522, order:20 took:
 36.4 seconds, i.e. 0.61 minutes or 0.01 hours.
CORELIST: False, METHOD: MB, SINDy: False (True also in case of MAVI), GROUND_TRUTH: False, SINDy_default: True, DEBUG: False, OEISformer: True
n_of_terms_ed: 200, N_OF_TERMS_ED: 200
Library: n, max_order 20, max_degree: 3, threshold: 0.1, 
n_more_terms: 10
Library: n, max_order 20, threshold: 0.1
  MB:  n_more_terms: 10 MAX_BITSIZE: 50

by degree: unknown_mb and order: 8.
eqs_explicit:
[]
non_linears:
['a(n-7)*a(n-8)^2 -a(n-7)*a(n-8) -a(n-8)^2 +a(n-8)', 'a(n-8)*a(n-9)^2 -a(n-8)*a(n-9) -a(n-9)^2 +a(n-9)', 'a(n-9)*a(n-10)^2 -a(n-9)*a(n-10) -a(n-10)^2 +a(n-10)', 'a(n-14)*a(n-16) -a(n-14) -a(n-16) +1', 'a(n-11)*a(n-13) +(-2/5)*a(n-9) +(-2/5)*a(n-10) +(-6/5)*a(n-11) +(-2/5)*a(n-12) +(-6/5)*a(n-13) +(-2/5)*a(n-14) +(-4/5)*a(n-15) +(-2/5)*a(n-16) +4', 'a(n-11)*a(n-12) +(-8/23)*a(n-9) +(1/23)*a(n-10) +(-7/23)*a(n-11) +(-26/23)*a(n-12) +(9/23)*a(n-13) +(4/23)*a(n-14) +(-7/23)*a(n-15) +(1/23)*a(n-16) +14/23', 'a(n-12)*a(n-14) +(2/23)*a(n-9) +(-6/23)*a(n-10) +(-4/23)*a(n-11) +(-28/23)*a(n-12) +(-8/23)*a(n-13) +(-24/23)*a(n-14) +(-4/23)*a(n-15) +(-6/23)*a(n-16) +54/23', 'a(n-9)*a(n-11) +(-10/23)*a(n-9) +(-16/23)*a(n-10) +(-26/23)*a(n-11) +(2/23)*a(n-12) +(-6/23)*a(n-13) +(28/23)*a(n-14) +(20/23)*a(n-15) +(-16/23)*a(n-16) +6/23', 'a(n-10)*a(n-15) +(-8/23)*a(n-9) +(-22/23)*a(n-10) +(16/23)*a(n-11) +(20/23)*a(n-12) +(32/23)*a(n-13) +(27/23)*a(n-14) +(-30/23)*a(n-15) +(1/23)*a(n-16) -55/23', 'a(n-3) +(-6/23)*a(n-9) +(18/23)*a(n-10) +(-11/23)*a(n-11) +(-31/23)*a(n-12) +(47/23)*a(n-13) +(26/23)*a(n-14) +(58/23)*a(n-15) +(110/23)*a(n-16) -231/23', 'a(n-9)*a(n-12) +(-17/23)*a(n-9) +(-18/23)*a(n-10) +(-12/23)*a(n-11) +(-38/23)*a(n-12) +(-47/23)*a(n-13) +(-26/23)*a(n-14) +(-35/23)*a(n-15) +(-18/23)*a(n-16) +185/23', 'a(n-14)*a(n-15) +(7/115)*a(n-9) +(2/115)*a(n-10) +(-14/115)*a(n-11) +(17/115)*a(n-12) +(41/115)*a(n-13) +(-38/115)*a(n-14) +(-106/115)*a(n-15) +(2/115)*a(n-16) +1/23', 'a(n-13)*a(n-14) +(7/115)*a(n-9) +(2/115)*a(n-10) +(-14/115)*a(n-11) +(17/115)*a(n-12) +(-74/115)*a(n-13) +(-153/115)*a(n-14) +(9/115)*a(n-15) +(2/115)*a(n-16) +24/23', 'a(n-15)*a(n-17) -a(n-15) -a(n-17) +1', 'a(n-14)*a(n-16) -a(n-14) -a(n-16) +1', 'a(n-11)*a(n-14) -a(n-11) -a(n-14) -a(n-15) -a(n-16) -a(n-17) +4', 'a(n-6) -2*a(n-11) +2*a(n-12) -2*a(n-14) -2*a(n-15) -4*a(n-16) -3*a(n-17) +9', 'a(n-13)*a(n-16) +(1/3)*a(n-11) +(-2/3)*a(n-13) +(2/3)*a(n-14) +(2/3)*a(n-15) +(1/3)*a(n-16) +(1/3)*a(n-17) -7/3', 'a(n-16)*a(n-17) +(-1/9)*a(n-11) +(2/9)*a(n-13) +(4/9)*a(n-14) +(7/9)*a(n-15) +(-1/9)*a(n-16) +(-10/9)*a(n-17) -8/9', 'a(n-14)*a(n-17) +(-1/9)*a(n-11) +(2/9)*a(n-13) +(-5/9)*a(n-14) +(7/9)*a(n-15) +(8/9)*a(n-16) +(-1/9)*a(n-17) -17/9', 'a(n-15)*a(n-16) +(-1/9)*a(n-11) +(2/9)*a(n-13) +(4/9)*a(n-14) +(-2/9)*a(n-15) +(-10/9)*a(n-16) +(-1/9)*a(n-17) +1/9', 'a(n-11)*a(n-16) +(-2/9)*a(n-11) +(4/9)*a(n-13) +(8/9)*a(n-14) +(5/9)*a(n-15) +(-2/9)*a(n-16) +(7/9)*a(n-17) -25/9', 'a(n-11)*a(n-15) +(-5/3)*a(n-11) +(-2/3)*a(n-13) +(-4/3)*a(n-14) +(-4/3)*a(n-15) +(-2/3)*a(n-16) +(-2/3)*a(n-17) +14/3', 'a(n-16)*a(n-18) -a(n-16) -a(n-18) +1', 'a(n-15)*a(n-17) -a(n-15) -a(n-17) +1', 'a(n-14)*a(n-16) -a(n-14) -a(n-16) +1', 'a(n-4) +a(n-17) -a(n-19) -1', 'a(n-17)*a(n-19) -a(n-17) -a(n-19) +1', 'a(n-16)*a(n-18) -a(n-16) -a(n-18) +1', 'a(n-15)*a(n-17) -a(n-15) -a(n-17) +1', 'a(n-20)^2 -a(n-20)', 'a(n-13) -a(n-17) -a(n-20) +1', 'a(n-9) +4*a(n-19) +5*a(n-20) -9', 'a(n-5) +a(n-18) -a(n-20) -1', 'a(n-4) +a(n-17) -a(n-19) -1', 'a(n-19)*a(n-20) -a(n-19) -2*a(n-20) +2', 'a(n-18)*a(n-20) -a(n-18) -a(n-20) +1', 'a(n-17)*a(n-20) -a(n-17) -a(n-20) +1', 'a(n-19)^2 -a(n-19) +2*a(n-20) -2']
A054522: 
MB not reconst
truth: 
None

False  -  checked against website ground truth.     
False  -  "manual" check if equation is correct.    

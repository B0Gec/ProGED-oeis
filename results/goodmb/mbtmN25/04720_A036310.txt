
orders_used: [17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]
dasco's acc_1, acc_10: False, False is stored in is_reconst and is_check
n_input: 25
While total time consumed by now, scale:4721/10000, seq_id:A036310, order:20 took:
 22.5 seconds, i.e. 0.38 minutes or 0.006 hours.
CORELIST: False, METHOD: MB, SINDy: False (True also in case of MAVI), GROUND_TRUTH: False, SINDy_default: True, DEBUG: False, OEISformer: True
n_of_terms_ed: 200, N_OF_TERMS_ED: 200
Library: n, max_order 20, max_degree: 3, threshold: 0.1, 
n_more_terms: 10
Library: n, max_order 20, threshold: 0.1
  MB:  n_more_terms: 10 MAX_BITSIZE: 50

by degree: unknown_mb and order: 17.
eqs_explicit:
[]
non_linears:
['a(n-13)*a(n-17) +(776/43)*a(n-11) +(5/4)*a(n-12) +(-420/43)*a(n-13) +(1242/43)*a(n-14) +(-347/43)*a(n-15) +(-725/43)*a(n-16) +(-14153/172)*a(n-17) -1751/43', 'a(n-12)*a(n-13) +(888/43)*a(n-11) +(-123/4)*a(n-12) +(-720/43)*a(n-13) +(2682/43)*a(n-14) +(-171/43)*a(n-15) +(-2109/43)*a(n-16) +(-15177/172)*a(n-17) +10617/43', 'n +(-34/473)*a(n-11) +(-1/16)*a(n-12) +(-125/946)*a(n-13) +(-87/473)*a(n-14) +(75/1892)*a(n-15) +(237/1892)*a(n-16) +(1311/7568)*a(n-17) -2275/172', 'a(n-12) +(-8/7)*a(n-14) +(4/7)*a(n-15) +(12/35)*a(n-16) +(19/35)*a(n-17) +(-16/7)*a(n-18) -44/7', 'a(n-4) +(27/32)*a(n-13) +(-7/4)*a(n-15) +(-7/8)*a(n-16) +(-17/8)*a(n-17) +(59/32)*a(n-18) -395/8', 'a(n-14)^2 +(5/4)*a(n-13) -9*a(n-14) +28*a(n-15) +(-127/5)*a(n-16) +(-219/5)*a(n-17) +(-99/4)*a(n-18) +257', 'a(n-17)*a(n-18) +(-15/4)*a(n-13) +12*a(n-14) +18*a(n-15) +(-21/5)*a(n-16) +(-147/5)*a(n-17) +(-111/4)*a(n-18) +51', 'a(n-13)*a(n-17) +(-109/4)*a(n-13) +20*a(n-14) +46*a(n-15) +(17/5)*a(n-16) +(-361/5)*a(n-17) +(-141/4)*a(n-18) +233', 'a(n-15)*a(n-18) +(5/8)*a(n-13) +18*a(n-14) +9*a(n-15) +(-113/10)*a(n-16) +(-271/10)*a(n-17) +(-283/8)*a(n-18) +103/2', 'a(n-13)*a(n-15) +(-217/8)*a(n-13) +30*a(n-14) +23*a(n-15) +(-59/10)*a(n-16) +(-613/10)*a(n-17) +(-313/8)*a(n-18) +589/2', 'n +(-1/16)*a(n-13) +(-3/14)*a(n-14) +(-1/7)*a(n-15) +(9/140)*a(n-16) +(23/140)*a(n-17) +(1/112)*a(n-18) -411/28', 'a(n-13)*a(n-16) +(-209/8)*a(n-13) +20*a(n-14) +53*a(n-15) +(-243/10)*a(n-16) +(-481/10)*a(n-17) +(-401/8)*a(n-18) +513/2', 'a(n-17)^2 -10*a(n-13) +(92/7)*a(n-14) +(178/7)*a(n-15) +(44/35)*a(n-16) +(-1727/35)*a(n-17) +(-138/7)*a(n-18) +716/7', 'a(n-14) +(-8/5)*a(n-16) +(-4/5)*a(n-17) +(4/5)*a(n-18) +a(n-19) -4', 'a(n-5) +(-2/5)*a(n-16) +(-1/5)*a(n-17) +(-14/5)*a(n-18) +a(n-19) -46', 'a(n-18)*a(n-19) +12*a(n-15) +12*a(n-16) +(-36/5)*a(n-17) +(-132/5)*a(n-18) -24*a(n-19) +36', 'a(n-16)*a(n-19) +18*a(n-15) +10*a(n-16) +(-54/5)*a(n-17) +(-138/5)*a(n-18) -36*a(n-19) +54', 'a(n-17)^2 +14*a(n-15) +28*a(n-16) +(-177/5)*a(n-17) +(-124/5)*a(n-18) -36*a(n-19) +92', 'a(n-15)^2 -9*a(n-15) +30*a(n-16) +(-122/5)*a(n-17) +(-224/5)*a(n-18) -26*a(n-19) +262', 'a(n-13) +(-8/7)*a(n-15) +(4/7)*a(n-16) +(12/35)*a(n-17) +(19/35)*a(n-18) +(-16/7)*a(n-19) -44/7', 'a(n-12) +(4/7)*a(n-15) +(-52/35)*a(n-16) +(-13/35)*a(n-17) +(-48/35)*a(n-18) +(8/7)*a(n-19) -76/7', 'a(n-10) +(-2/7)*a(n-15) +(-72/35)*a(n-16) +(-32/35)*a(n-17) +(94/35)*a(n-18) +(-4/7)*a(n-19) -116/7', 'a(n-8) +(-4/7)*a(n-15) +(-67/35)*a(n-16) +(-57/35)*a(n-17) +(-1/35)*a(n-18) +(27/7)*a(n-19) -169/7', 'n +(2/5)*a(n-17) +(-1/5)*a(n-18) -a(n-20) -18', 'a(n-16) +3*a(n-17) -a(n-18) -a(n-19) -5*a(n-20) -5', 'a(n-15) +(-8/5)*a(n-17) +(-4/5)*a(n-18) +(4/5)*a(n-19) +a(n-20) -4', 'a(n-14) +4*a(n-17) +(-4/5)*a(n-18) +(-3/5)*a(n-19) -8*a(n-20) -12', 'a(n-13) +(-16/5)*a(n-17) +(1/5)*a(n-18) +(-4/5)*a(n-19) +4*a(n-20) -8', 'a(n-12) +5*a(n-17) +(-12/5)*a(n-18) +(-4/5)*a(n-19) -8*a(n-20) -16', 'a(n-5) +a(n-17) +(-16/5)*a(n-18) +(3/5)*a(n-19) -2*a(n-20) -48', 'a(n-4) +(2/5)*a(n-17) +(-3/5)*a(n-18) +(6/5)*a(n-19) -6*a(n-20) -54', 'a(n-11) +(-6/5)*a(n-17) +(-6/5)*a(n-18) +(12/5)*a(n-19) -2*a(n-20) -18', 'a(n-9) +(-1/5)*a(n-17) +(-11/5)*a(n-18) +(-3/5)*a(n-19) +a(n-20) -27']
A036310: 
MB not reconst
truth: 
None

False  -  checked against website ground truth.     
False  -  "manual" check if equation is correct.    
